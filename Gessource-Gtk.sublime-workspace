{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"_command",
				"_command_add"
			],
			[
				"butt",
				"button_add"
			],
			[
				"button",
				"button_reset"
			],
			[
				"box_",
				"box_label_entry"
			],
			[
				"_creation",
				"_creation_box"
			],
			[
				"_creatio",
				"_creation_box"
			],
			[
				"save",
				"save_game"
			],
			[
				"myfra",
				"myframe"
			],
			[
				"_test_",
				"_test_int"
			],
			[
				"_test",
				"_test_encadrement"
			],
			[
				"liste",
				"liste_nom"
			],
			[
				"va",
				"ValueError\terror"
			],
			[
				"show",
				"showinfo"
			],
			[
				"er",
				"error"
			],
			[
				"to",
				"today\tlatex-document"
			],
			[
				"sec",
				"section*{title}\tlatex-document"
			],
			[
				"section",
				"section\tSection"
			],
			[
				"begin",
				"begin{document}\tlatex-document"
			],
			[
				"do",
				"documentclass[options]{style}\tlatex-document"
			],
			[
				"dot",
				"\\dots                                             \ttex"
			],
			[
				"i",
				"\\item"
			],
			[
				"b",
				"\\begin"
			],
			[
				"beg",
				"\\begin"
			],
			[
				"create_",
				"create_window"
			],
			[
				"create",
				"create_window"
			],
			[
				"se",
				"set\tset"
			],
			[
				"insert",
				"insert"
			],
			[
				"def",
				"defs\tMethod"
			],
			[
				"liste_",
				"liste_site"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# !/usr/bin/env python3\n# -*- coding: utf8 -*-\n# Python 3.8\nimport gi\n\ngi.require_version(\"Gtk\", \"3.0\")\n\nfrom gi.repository import Gtk, GLib\nfrom tkinter import *\nfrom tkinter.ttk import *\nfrom tkinter.messagebox import *\nfrom tkinter.filedialog import askopenfilename, asksaveasfilename\n# import pdb; pdb.set_trace()\nimport pickle\nfrom collections import OrderedDict\nimport os\nfrom manage import manage_json_file as mjf\nimport json\n\nclass DataManage:\n    \"\"\"docstring for Save\"\"\"\n    def __init__(self):\n        self._data=OrderedDict({\"pv\":{\"vmin\":-1,\"vmax\":20,\"vdefaut\":25,\"vact\":25}})\n        \n\n\n    @property\n    def data(self):\n        return self._data\n\n    @data.setter\n    def data(self, key, value, v):\n        self._data =  v\n\n    def _json_to_list(self, json_file):\n        liste=[]\n        \n        for key,values in json_file.items():\n            liste.append([key,values[\"vmin\"],values[\"vmax\"],values[\"vdefaut\"],values[\"vact\"]])\n        return liste\n\n    def _list_to_json(self, liste_de_liste):\n        \n        json_file={}\n        for element in liste_de_liste:\n            json_file[element[0]]={\"vmin\":element[1], \"vmax\": element[2], \"vdefaut\":element[3], \"vact\":element[4]}\n        return json_file\n\n    def load_data(self,filename):\n        self._data=OrderedDict(mjf.load(filename))\n\n    def save_data(self,filename):\n        mjf.save(filename , self.data)\n\n    def add_data(self, key, liste):\n        liste_nom=[\"vmin\",\"vmax\",\"vdefaut\",\"vact\"]\n        dictionnary={}\n        for index in range(len(liste_nom)):\n            dictionnary[liste_nom[index]] = liste[index]\n        self._data[key]=dictionnary\n\n    # def update_data(self,key,dictionnary):\n    #     liste_keys=list(self.data[key].keys())\n    #     if key in self.data:\n    #         for index in range(len(values)):\n    #             self.data[key][liste_keys[index]] = values[index]\n    #     else:\n    #          self.add_data(liste)\n\n    def update_data(self, mainkey, secondkey, value):\n        self._data[mainkey][secondkey] = value\n\n\n    def del_data(self, key):\n        del self.data[key]\n\nclass Root(Gtk.Window):\n    \"\"\"docstring for GtkWindow\"\"\"\n    save = DataManage()\n    def __init__(self):\n        Gtk.Window.__init__(self, title='Gessource')\n        self.set_default_size(200, 200)\n        self.connect(\"destroy\", Gtk.main_quit)\n        self.filename = \"\"\n        # self.root.protocol(\"WM_DELETE_WINDOW\", self._confirmerquitter)\n        # self.root.bind(\"<Escape>\", self._confirmerquitter)\n\n    def _confirmerquitter(self):\n        if askyesno(\"Quit\", \"Do you want to quit ?\"):\n            Gtk.main_quit\n\n    def _escape_command(self, event):\n        self.ConfirmerQuitter()\n\n    def creation_fenetre(self):\n\n        self.creation_box()\n        self._creation_button_add()\n        self._button_menu()\n        self.show_all()\n\n    def creation_box(self):\n        self.grid=Gtk.Grid()\n        self.add(self.grid)\n\n        self.box_ressource = Gtk.Box(\n            orientation=Gtk.Orientation.VERTICAL, \n            spacing=6\n            )\n        self.grid.attach(self.box_ressource, 1, 1, 4, 1)\n\n    def _creation_button_add(self):\n        self.button_add = Gtk.Button(label=\"Add entry\")\n        self.button_add.connect(\"clicked\",self._command_add)\n        self.grid.attach(self.button_add , 2, 4, 4, 1)\n        \n\n    # On crée la barre de menu\n    def _button_menu(self):\n        menu_button = Gtk.MenuButton(\"Menu\")\n        self.grid.attach(menu_button, 0, 0, 2, 2)\n\n        menu = Gtk.Menu()\n        menu_button.set_popup(menu)\n        \n        new_game=Gtk.MenuItem(\"New game\")\n        new_game.connect(\"activate\",self._command_new)\n        menu.append(new_game)\n        load_game=Gtk.MenuItem(\"Load game\")\n        load_game.connect( \"activate\",self._command_load)\n        menu.append(load_game)\n        save_game=Gtk.MenuItem(\"Save game\")\n        save_game.connect( \"activate\",self._command_save)\n        menu.append(save_game)\n        Save_game_as=Gtk.MenuItem(\"Save game as\")\n        load_game.connect( \"activate\",self._command_save)\n        menu.append(Save_game_as)\n        exit=Gtk.MenuItem(\"exit\")\n        exit.connect( \"activate\",self._confirmerquitter)\n        menu.append(exit)\n        \n\n        menu.show_all()\n\n    # Fonctions lié au menu\n    def _command_new(self, button):  # Fonction lié au bouton new\n        self._new()\n\n    \n    def _command_load(\n        self, button\n    ):  # Fonction ouvrant le fichier choisis et l'assigne à save\n        self._load()\n        \n\n    def _command_save(self, button):  # Fonction sauvegardant toutes les valeurs de save\n        self._save()\n        \n\n    def _command_save_as(self, button):  # fonction lié au bouton save as\n        self._save_as()\n\n    def _command_add(self, button):\n       self.add_newbox(\"pv\")\n\n    def _new(self):\n        self.filename = \"\"\n        self.save.data.__init__()\n        self.box_ressource.destroy()\n        self._creation_box()\n\n\n    def _save(self):\n        if self.filename == \"\":\n            self._save_as()\n        else:\n\n            # for element in self.listeframe:\n            #     self.save.append(element.liste_val)\n            self.save.save_data(self.filename)\n            showinfo(\"File saved\", \"Your file is saved\")\n\n    def _save_as(self):\n        filename = asksaveasfilename()\n        if filename == \"\":\n            pass\n        else:\n            self.filename = filename\n            self._save()\n\n    def _add(self):\n        liste = GtkDefVal()\n\n        liste.creation_fenetre()\n        \n    def add_newbox(self, key):\n        self.key=key\n        box = MyBox(self.box_ressource, self.key)\n        box.creation_my_box()\n\n    def _load(self):\n        pass   \n\n# Cration de l'objet frame dans lequel se trouve un label avec une valeur, une zone d'entrée et un bouton\n\n\nclass MyBox:\n    def __init__(self, box, key):  # Initialisation de My Frame\n        self.box = box\n        self.name = key\n        self.vmin = Root.save.data[key].get(\"vmin\")\n        self.vmax = Root.save.data[key].get(\"vmax\")\n        self.vdefaut = Root.save.data[key].get(\"vdefaut\")\n        self.vact = Root.save.data[key].get(\"vact\")\n        self.box_line = Gtk.Box(spacing=3)\n        # import pdb; pdb.set_trace()\n        \n    def creation_my_box(self):  # Creation de la fenêtre\n        self.box.pack_start(self.box_line, True, True, 0)\n        self._creation_lbl_entry()\n        self._creation_button()\n        \n\n    def _creation_lbl_entry(\n        self,\n    ):  # Creation du label du name est du label de la valeur affiché\n        # import pdb; pdb.set_trace()\n        \n\n        \n        lbl_nom = Gtk.Label()\n        lbl_nom.set_text(self.name+\":\")\n        self.box_line.pack_start(lbl_nom, True, True, 0)\n\n       \n        lbl_value = Gtk.Label()\n        lbl_value.set_text(str(self.vact))\n        self.box_line.pack_start(lbl_value, True, True, 0)\n\n        self.entry = Gtk.Entry()\n       \n        # self.entri.bind(\"<Return>\", self._command_ok)\n        self.box_line.pack_start(self.entry, True, True, 0)\n\n    def _creation_button(\n        self,\n    ):  # Creation des boutons de modification, de suppression et de reset\n       \n        button_reset = Gtk.Button(label=\"_Refresh\")\n        button_reset.connect(\"clicked\",self._command_reset)\n        self.box_line.pack_start(button_reset, True, True, 0)\n\n\n        button_edit = Gtk.Button(label=\"_Edit\")\n\n        button_edit.connect(\"clicked\",self._command_edit)\n        self.box_line.pack_start(button_edit, True, True, 0)\n\n       \n\n        button_delete= Gtk.Button(label=\"_Delete\")\n        button_delete.connect(\"clicked\",self._command_delete)\n        self.box_line.pack_start(button_delete, True, True, 0)\n\n    # Fonction du bouton ok qui modifie les valeurs et nettoie l'Entry\n    # def _command_ok(self, event):\n    #     self._ok()\n\n\n    def _command_reset(self, button):  # commande du bouton reset\n        self.vact = self.vdefaut\n        # self.lbl2[\"text\"] = (self.vact, \"/\", self.vmax)\n        self.lbl_value.set_text(str(self.vact))\n        Root.save.update_data(self.name,\"vact\",self.vact)\n        self.entri.delete(0, END)\n        # import pdb; pdb.set_trace()\n\n    def _command_edit(self, button):  # commande du bouton modifie\n        # self.listevar=[self.name,self.vmin,self.vmax,self.vdefaut,self.vact]\n        \n        self._modifie()\n\n    def _command_delete(self, button):  # commande du delete\n        self._delete()\n\n\n    def _delete(self):\n         if askyesno(\"Delete\", \"Do you want to delete ?\"):\n            Root.save.del_data(self.name)\n            self.box.destroy()\n       \n\n    def _test_encadrement(self,vact,vmin,vmax):\n        \n        if vact < vmin:\n            vact = vmin\n        elif vact> vmax:\n            vact = vmax\n        return vact\n    \n\n    def _update(self,index,data):\n        self.lbl_value.set_text(str(data))            \n        Root.save.data[self.i][index] = data\n        \n\n    def _test_int(self,vtest):\n        try:\n\n            int(vtest)\n            return True\n        except ValueError:\n            showerror(\n                \"Error message\",\n                \"Veuillez entrer un entier positif ou negatif ou nul\",\n            )               \n            return False\n            \n\n    def _ok(self):\n        get_valeur= int(self.entri.get())\n        vact=self.vact \n        if self._test_int(get_valeur):\n            vact += get_valeur\n            self.vact = self._test_encadrement(vact,self.vmin,self.vmax)\n            self.lbl_value.set_text(str(self.vact))\n            Root.save.update_data(self.name,\"vact\",self.vact)\n        self.entri.delete(0,END)\n\n    def _modifie(self):\n        self.fen = DefVal()\n        self.fen.modifie = True\n        vact=self.vact\n        self.fen.valeurs = [self.name]+list(Root.save.data[self.name].values())\n        liste_nom = [\n            \"vmin\",\n            \"vmax\",\n            \"vdefaut\",\n        ]\n        self.fen.creation_fenetre()\n\n        for j in range(1, 4):\n            Root.save.update_data(self.name,liste_nom[j-1], self.fen.valeurs[j])\n            \n       \n        self.vmin = Root.save.data[self.name][\"vmin\"]\n        self.vmax = Root.save.data[self.name][\"vmax\"]\n        self.vdefaut = Root.save.data[self.name][\"vdefaut\"]\n        self.vact=self._test_encadrement(vact,self.vmin,self.vmax)\n        self.lbl_value.set_text(str(self.vact))\n            \n\nclass GtkDefVal(Gtk.Window):\n    \"\"\"docstring for DefVal\"\"\"\n\n    def __init__(self):\n        self._valeurs = [\"\", 0, 0, 0, 0]\n        self.modifie = False\n        self.liste_entry = []\n\n        Gtk.Window.__init__(self)\n      \n        self.set_default_size(200, 200)\n        self.set_transient_for()\n        self.main_box=Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)\n        self.add(self.main_box)\n        # self.win.geometry(\"+320+0\")\n\n    @property\n    def valeurs(self):\n        return self._valeurs\n\n    @valeurs.setter\n    def valeurs(self, v):\n        self._valeurs = v\n\n    def creation_fenetre(self):  # We create the window of DefVal\n\n        self._creation_boxes()\n        self._creation_button()\n        self.show_all()\n\n    def _creation_boxes(self):  # We create boxes of the window of DefData\n        self.box_label_entry=Gtk.Box(spacing=6)\n        self.box_entry=Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)\n        self.box_label=Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)\n\n        self.liste_nom = [ # We make a list with name of label\n            \"name:\",\n            \"Valeur min:\",\n            \"Valeur max:\",\n            \"Valeur par defaut:\",\n        ]  \n        for i in range(4):\n            \n           \n            if self.modifie:\n                if i == 0:\n                    self._creation_label(self.valeurs[i])\n                   \n                else:    \n                    self._creation_label(self.liste_nom[i])\n                    self._creation_entry(self._valeurs[i])\n            else:\n                self._creation_label(self.liste_nom[i])\n                self._creation_entry(self._valeurs[i])\n\n        self.box_label_entry.pack_start(self.box_label, False, False, 0) \n        self.box_label_entry.pack_start(self.box_entry, False, False, 0)  \n        self.main_box.pack_start(self.box_label_entry, False, False, 0)  \n\n\n    def _creation_label(self,name):\n        self.lbl = Gtk.Label()\n        self.lbl.set_text(name)\n        self.lbl.set_max_width_chars(20)\n        self.box_label.pack_start(self.lbl, True, True, 0)\n\n\n\n    def _creation_entry(self ,  value):\n        self.entry = Gtk.Entry()\n        self.entry.set_text(str(value))\n        self.box_entry.pack_start(self.entry, True, True, 0)\n\n        self.liste_entry.append(self.entry)\n\n\n    def _creation_button(self):\n        self.box_button = Gtk.Box(spacing=6)\n        \n        self.button_ok = Gtk.Button(stock=Gtk.STOCK_OK)\n        self.box_button.pack_start(self.button_ok, False, True, 0)\n        self.button_ok.connect(\"clicked\",self._command_ok)\n\n        self.button_cancel = Gtk.Button(stock=Gtk.STOCK_CANCEL)\n        self.box_button.pack_start(self.button_cancel, False, True, 0)\n        self.button_cancel.connect(\"clicked\", self._command_cancel)\n\n\n        self.main_box.pack_start(self.box_button, True, False, 0)\n\n\n    def _command_ok(self, button):\n\n        self._get_value()\n        if self._test_int(self.valeurs[1:3]):\n            if self._test_ordre(self.valeurs[1],self.valeurs[2],self.valeurs[3]):\n                if not self.modifie:\n                    self.valeurs[4] = self.valeurs[3]\n                    Root.save.add_data(self.valeurs[0],self.valeurs[1:])\n                    Root.add_newbox(Root, self.valeurs[0])\n                self._quit()\n\n        \n\n    def _command_cancel(self, button):\n        self.valeurs=[\"\",0,0,0,0]\n        self.close()       \n\n    def _test_encadrement(self, liste):\n\n        test = self._test_int(self.valeurs[1:4])\n\n        if test:\n            for index in range(len(self.valeurs)):\n                if index != 0:\n                    self.valeurs[index] = int(self.valeurs[index])\n            if liste[0] == \"\":\n                return False\n            if liste[1] > liste[2]:\n    \n                Gtk.MessageDialog(\n                transient_for=self,\n                flags=0,\n                message_type=Gtk.MessageType.INFO,\n                buttons=Gtk.ButtonsType.OK,\n                text=\"Le minimum doit être plus petit que le maximum\",\n        )\n            if liste[3] < liste[1] or liste[3] > liste[2]:\n                \n                Gtk.MessageDialog(\n                transient_for=self,\n                flags=0,\n                message_type=Gtk.MessageType.INFO,\n                buttons=Gtk.ButtonsType.OK,\n                text=\"La valeur par défaut doit être comprise entre le minium et le maximum\",\n                )\n            else:\n                \n                return True\n        else:\n            return False\n\n    def _test_ordre(self, vmin, vmax, test_value):\n        if vmin>vmax:\n            self._error_message(\"Le minimum doit être plus petit que le maximum\"\n        )    \n                 \n            return False\n\n        elif test_value<vmin or test_value>vmax:\n            self._error_message(\"La valeur par défaut doit être comprise entre le minium et le maximum\")\n            return False\n        else:\n            return True\n\n\n    def _test_int(self, liste):\n        try:\n\n            for element in liste:\n\n                element = int(element)\n\n            return True\n        except ValueError:\n            self._error_message(\"Veuillez entrer un entier\")\n            \n\n    def _get_value(self):\n        if self.modifie:\n            self.valeurs[1] = int(self.liste_entry[0].get_text())  # min\n            self.valeurs[2] = int(self.liste_entry[1].get_text())  # max\n            self.valeurs[3] = int(self.liste_entry[2].get_text())  # valeur par def\n        else:\n            self.valeurs[0] = str(self.liste_entry[0].get_text())  # name\n            self.valeurs[1] = int(self.liste_entry[1].get_text())  # min\n            self.valeurs[2] = int(self.liste_entry[2].get_text())  # max\n            self.valeurs[3] = int(self.liste_entry[3].get_text())  # valeur par defaut\n\n    def _error_message(self, message):\n        dialog=Gtk.MessageDialog(\n                transient_for=self,\n                flags=0,\n                message_type=Gtk.MessageType.INFO,\n                buttons=Gtk.ButtonsType.OK,\n                text=message\n                )\n        dialog.run()\n            \n\n        dialog.destroy()\n\n    def _quit(self):\n    \n        self.close()\n        \n\n\n        \n    \n\ndef main():\n    gestionnaire_ressource = Root()\n    gestionnaire_ressource.creation_fenetre()\n    Gtk.main()\n    \n    \n    # test._json_to_list({'Pv': {'vmin': -10, 'vmax': 20, 'vdefaut': 20, 'vact': 0}, 'Mana': {'vmin': 0, 'vmax': 20, 'vdefaut': 20, 'vact': 0}})\n   \n    \ndef test_data():\n    test=DataManage()\n    (liste,liste1)=([-10, 20, 20, 0],[0, 20, 20, 0])\n    \n    test.add_data(\"PV\",liste)\n    \n    test.add_data(\"Mana\", liste1)\n\ndef test_ordre(vmin, vmax, test_value):\n    if vmin>vmax:\n         print(\"info\", \"Le minimum doit être plus petit que le maximum\")\n         return False\n    elif test_value<vmin or test_value>vmax:\n        print(\n                \"Info\",\n                \"La valeur par défaut doit être comprise entre le minium et le maximum\",\n            )\n        return False\n    else:\n     \n        print(\"Le test est bon\")\n        return True\ndef several_test_order():\n    test_ordre(-10, 100 , 50)\n    test_ordre(-10, 100 , 120)\n    test_ordre(-10, 100 , -60)\n    test_ordre(-10, -100 , 60)\n\nif __name__ == \"__main__\":\n    main()\n\n    # os.system(\"pause\")\n\n\n\n        ",
			"file": "Gestionnaire de ressources3.py",
			"file_size": 17631,
			"file_write_time": 132622054693920544,
			"settings":
			{
				"buffer_size": 17623,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cedric/Documents/FichierPython/test gtk/test gtk.py",
			"settings":
			{
				"buffer_size": 10822,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cedric/Documents/FichierPython/test gtk/test gtkapplication.py",
			"settings":
			{
				"buffer_size": 521,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python3  \n# -*- coding: utf8 -*-\n# Python 3\nfrom tkinter import *\nfrom tkinter.ttk import *\nfrom tkinter.messagebox import *\nfrom tkinter.filedialog import askopenfilename, asksaveasfilename\n# import pdb; pdb.set_trace()\nimport pickle\nfrom collections import OrderedDict\nimport os\nfrom manage import manage_json_file as mjf\nimport json\n\nclass DataManage:\n    \"\"\"docstring for Save\"\"\"\n    def __init__(self):\n        self._data=OrderedDict()\n        \n\n\n    @property\n    def data(self):\n        return self._data\n\n    @data.setter\n    def data(self, key, value, v):\n        self._data =  v\n\n    def _json_to_list(self, json_file):\n        liste=[]\n        \n        for key,values in json_file.items():\n            liste.append([key,values[\"vmin\"],values[\"vmax\"],values[\"vdefaut\"],values[\"vact\"]])\n        return liste\n\n    def _list_to_json(self, liste_de_liste):\n        \n        json_file={}\n        for element in liste_de_liste:\n            json_file[element[0]]={\"vmin\":element[1], \"vmax\": element[2], \"vdefaut\":element[3], \"vact\":element[4]}\n        return json_file\n\n    def load_data(self,filename):\n        self._data=OrderedDict(mjf.load(filename))\n\n    def save_data(self,filename):\n        mjf.save(filename , self.data)\n\n    def add_data(self, key, liste):\n        liste_nom=[\"vmin\",\"vmax\",\"vdefaut\",\"vact\"]\n        dictionnary={}\n        for index in range(len(liste_nom)):\n            dictionnary[liste_nom[index]] = liste[index]\n        self._data[key]=dictionnary\n\n    # def update_data(self,key,dictionnary):\n    #     liste_keys=list(self.data[key].keys())\n    #     if key in self.data:\n    #         for index in range(len(values)):\n    #             self.data[key][liste_keys[index]] = values[index]\n    #     else:\n    #          self.add_data(liste)\n\n    def update_data(self, mainkey, secondkey, value):\n        self._data[mainkey][secondkey] = value\n\n\n    def del_data(self, key):\n        del self.data[key]\n\nclass Root(object):\n    \"\"\"docstring for Root\"\"\"\n\n    root = Tk()\n    root.geometry(\"+150+0\")\n    save = DataManage()\n\n    def __init__(self):\n        self.filename = \"\"\n        self.listeframe = []\n\n        self.root.protocol(\"WM_DELETE_WINDOW\", self._confirmerquitter)\n        self.root.bind(\"<Escape>\", self._confirmerquitter)\n\n    def _confirmerquitter(self):\n        if askyesno(\"Quit\", \"Do you want to quit ?\"):\n            self.root.destroy()\n\n    def _escape_command(self, event):\n        self.ConfirmerQuitter()\n\n    def creation_fenetre(self):\n\n        self._creation_frame()\n        self._barre_menu()\n        self.root.mainloop()\n\n    def _creation_frame(self):\n        self.frame_ressource = Frame(self.root, width=200, relief=\"groove\")\n        self.frame_ressource.grid(column=1, row=1)\n\n        self.frame_btt = Frame(self.root)\n        self.frame_btt.grid(column=1, row=2)\n\n        self.bttadd = Button(self.frame_btt, text=\"Add entry\", command=self._command_add)\n        self.bttadd.pack(side=LEFT)\n\n    # On crée la barre de menu\n    def _barre_menu(self):\n        self.mb = Menubutton(self.root, text=\"Menu\")\n        self.mb.grid(column=0, row=0)\n\n        self.mb.menu = Menu(self.mb, tearoff=0)\n        self.mb[\"menu\"] = self.mb.menu\n        self.mb.menu.add_command(label=\"New game\", command=self._command_new)\n        self.mb.menu.add_command(label=\"Load game\", command=self._command_open)\n        self.mb.menu.add_command(label=\"Save game\", command=self._command_save)\n        self.mb.menu.add_command(label=\"Save game as\", command=self._command_save_as)\n        self.mb.menu.add_command(label=\"Exit\", command=self._confirmerquitter)\n        # self.menubar.add_cascade(label=\"Files\", menu=self.filemenu)\n\n        # self.root.config(menu=self.menubar)\n\n    # Fonctions lié au menu\n    def _command_new(self):  # Fonction lié au bouton new\n        self._new()\n\n    \n    def _command_open(\n        self\n    ):  # Fonction ouvrant le fichier choisis et l'assigne à save\n        self._open()\n        \n\n    def _command_save(self):  # Fonction sauvegardant toutes les valeurs de save\n        self._save()\n        \n\n    def _command_save_as(self):  # fonction lié au bouton save as\n        self._save_as()\n\n    def _command_add(self):\n       self._add()\n\n    def _new(self):\n        self.filename = \"\"\n        self.save.data.__init__()\n        self.frame_ressource.destroy()\n        self.frame_ressource = Frame(self.root, width=200, relief=\"groove\")\n        self.frame_ressource.grid(column=1, row=1)\n\n    def _save(self):\n        if self.filename == \"\":\n            self._save_as()\n        else:\n\n            # for element in self.listeframe:\n            #     self.save.append(element.liste_val)\n            self.save.save_data(self.filename)\n            showinfo(\"File saved\", \"Your file is saved\")\n\n    def _save_as(self):\n        filename = asksaveasfilename()\n        if filename == \"\":\n            pass\n        else:\n            self.filename = filename\n            self._save()\n\n    def _add(self):\n        liste = DefVal()\n        liste.creation_fenetre()\n        print(liste.valeurs)\n        if liste.valeurs[0] == \"\":\n            pass\n        else:\n            self.save.add_data(liste.valeurs[0],liste.valeurs[1:])\n            frame = MyFrame(self.frame_ressource, liste.valeurs[0])\n\n            frame.creation_my_frame()\n\n    def _open(self):\n        self._new()\n        filename = askopenfilename()\n        try:\n            if filename == \"\":\n                pass\n            else:\n                self.filename = filename\n                # import pdb; pdb.set_trace()\n                self.save.load_data(self.filename)             \n                for element in self.save.data:\n                    self.frame = MyFrame(self.frame_ressource, element)\n                    self.frame.creation_my_frame()\n        except TypeError:\n            pass\n# Cration de l'objet frame dans lequel se trouve un label avec une valeur, une zone d'entrée et un bouton\n\n\nclass MyFrame:\n    def __init__(self, root, key):  # Initialisation de My Frame\n        self.root = root\n        self.name = key\n        self.vmin = Root.save.data[key].get(\"vmin\")\n        self.vmax = Root.save.data[key].get(\"vmax\")\n        self.vdefaut = Root.save.data[key].get(\"vdefaut\")\n        self.vact = Root.save.data[key].get(\"vact\")\n        self.myframe = Frame(self.root)\n        # import pdb; pdb.set_trace()\n    def creation_my_frame(self):  # Creation de la fenêtre\n\n        self._creation_lbl_entry()\n        self._creation_button()\n        self.myframe.pack(pady=5)\n\n    def _creation_lbl_entry(\n        self,\n    ):  # Creation du label du name est du label de la valeur affiché\n        self.text = StringVar()\n        self.text.set(str(self.vact))\n        lbl1 = Label(self.myframe, text=self.name+\":\",justify=\"left\")\n        lbl1.grid(row=0, column=1)\n\n        lbl2 = Label(self.myframe, textvariable=self.text, justify=\"right\")\n        lbl2.grid(row=0, column=2)\n\n        self.entri = Entry(self.myframe, width=10)\n        self.entri.bind(\"<Return>\", self._command_ok)\n        self.entri.grid(row=0, column=3)\n\n    def _creation_button(\n        self,\n    ):  # Creation des boutons de modification, de suppression et de reset\n        self.photo_reset = PhotoImage(file=\"image/fleche_reset.gif\")\n        bps_reset = Button(\n            self.myframe, image=self.photo_reset, command=self._button_reset\n        )\n        bps_reset.grid(row=0, column=4)\n\n        self.photo_modifie = PhotoImage(file=\"image/mini_crayon.gif\")\n        bps_modifie = Button(\n            self.myframe, image=self.photo_modifie, command=self._button_modifie\n        )\n        bps_modifie.grid(row=0, column=5)\n\n        self.photo_delete = PhotoImage(file=\"image/mini_corbeille.gif\")\n        bps_delete = Button(\n            self.myframe, image=self.photo_delete, command=self._button_delete\n        )\n        bps_delete.grid(row=0, column=6)\n\n    # Fonction du bouton ok qui modifie les valeurs et nettoie l'Entry\n    def _command_ok(self, event):\n        self._ok()\n\n\n    def _button_reset(self):  # commande du bouton reset\n        self.vact = self.vdefaut\n        # self.lbl2[\"text\"] = (self.vact, \"/\", self.vmax)\n        self.text.set(str(self.vact))\n        Root.save.update_data(self.name,\"vact\",self.vact)\n        self.entri.delete(0, END)\n        # import pdb; pdb.set_trace()\n\n    def _button_modifie(self):  # commande du bouton modifie\n        # self.listevar=[self.name,self.vmin,self.vmax,self.vdefaut,self.vact]\n        \n        self._modifie()\n\n    def _button_delete(self):  # commande du delete\n        self._delete()\n\n\n    def _delete(self):\n         if askyesno(\"Delete\", \"Do you want to delete ?\"):\n            Root.save.del_data(self.name)\n            self.myframe.destroy()\n       \n\n    def _test_encadrement(self,vact,vmin,vmax):\n        \n        if vact < vmin:\n            vact = vmin\n        elif vact> vmax:\n            vact = vmax\n        return vact\n    \n\n    def _update(self,index,data):\n        self.text.set(str(data))            \n        Root.save.data[self.i][index] = data\n        \n\n    def _test_int(self,vtest):\n        try:\n\n            int(vtest)\n            return True\n        except ValueError:\n            showerror(\n                \"Error message\",\n                \"Veuillez entrer un entier positif ou negatif ou nul\",\n            )               \n            return False\n            \n\n    def _ok(self):\n        get_valeur= int(self.entri.get())\n        vact=self.vact \n        if self._test_int(get_valeur):\n            vact += get_valeur\n            self.vact = self._test_encadrement(vact,self.vmin,self.vmax)\n            self.text.set(str(self.vact))\n            Root.save.update_data(self.name,\"vact\",self.vact)\n        self.entri.delete(0,END)\n\n    def _modifie(self):\n        self.fen = DefVal()\n        self.fen.modifie = True\n        vact=self.vact\n        self.fen.valeurs = [self.name]+list(Root.save.data[self.name].values())\n        liste_nom = [\n            \"vmin\",\n            \"vmax\",\n            \"vdefaut\",\n        ]\n        self.fen.creation_fenetre()\n\n        for j in range(1, 4):\n            Root.save.update_data(self.name,liste_nom[j-1], self.fen.valeurs[j])\n            \n       \n        self.vmin = Root.save.data[self.name][\"vmin\"]\n        self.vmax = Root.save.data[self.name][\"vmax\"]\n        self.vdefaut = Root.save.data[self.name][\"vdefaut\"]\n        self.vact=self._test_encadrement(vact,self.vmin,self.vmax)\n        self.text.set(str(self.vact))\n            \n\nclass DefVal(Root):\n    \"\"\"docstring for DefVal\"\"\"\n\n    def __init__(self):\n        self._valeurs = [\"\", 0, 0, 0, 0]\n        self.modifie = False\n        self.liste_entry = []\n        self.win = Toplevel(self.root)\n        self.win.geometry(\"+320+0\")\n\n    @property\n    def valeurs(self):\n        return self._valeurs\n\n    @valeurs.setter\n    def valeurs(self, v):\n        self._valeurs = v\n\n    def creation_fenetre(self):  # We create the window of DefVal\n\n        self._creation_ligne()\n        self._creation_button()\n        self.win.mainloop()\n\n    def _creation_ligne(self):  # We create lines of the window of Def data\n\n        self.liste_nom = [\n            \"name:\",\n            \"Valeur min:\",\n            \"Valeur max:\",\n            \"Valeur par defaut:\",\n        ]  # We make a list with name of label\n        for i in range(4):\n            self.frame = Frame(self.win, width=35)\n            self.frame.pack()\n            if self.modifie:\n                if i == 0:\n                    self._creation_label(self.frame,self.valeurs[i])\n                   \n                else:    \n                    self._creation_label(self.frame,self.liste_nom[i])\n                    self._creation_entry(self.frame,self._valeurs[i])\n            else:\n                self._creation_label(self.frame,self.liste_nom[i])\n                self._creation_entry(self.frame,self._valeurs[i])\n               \n        \n    def _creation_label(self,frame,name):\n        self.lbl = Label(self.frame, text=name, width=18)\n        self.lbl.pack(side=LEFT)\n\n\n\n    def _creation_entry(self , frame, value):\n        self.entry = Entry(frame, width=10)\n        self.entry.insert(0, value)\n        self.entry.pack(side=RIGHT)\n        self.liste_entry.append(self.entry)\n\n\n    def _creation_button(self):\n        self.frame_button = Frame(self.win, width=15)\n        self.frame_button.pack(side=BOTTOM)\n        self.button_ok = Button(\n            self.frame_button, text=\"OK\", command=self._commande_ok\n        )\n        self.button_ok.pack(side=LEFT)\n        self.button_cancel = Button(\n            self.frame_button, text=\"Cancel\", command=self._command_cancel\n        )\n        self.button_cancel.pack(side=RIGHT, padx=5)\n\n    def _commande_ok(self):\n\n        self._get_value()\n        if self._test_int(self.valeurs[1:3]):\n            if self._test_ordre(self.valeurs[1],self.valeurs[2],self.valeurs[3]):\n                if not self.modifie:\n                    self.valeurs[4] = self.valeurs[3]\n            \n                \n                self._quit()\n\n        \n\n    def _command_cancel(self):\n\n        self.win.destroy()\n       \n\n    def _test_encadrement(self, liste):\n\n        test = self._test_int(self.valeurs[1:4])\n\n        if test:\n            for index in range(len(self.valeurs)):\n                if index != 0:\n                    self.valeurs[index] = int(self.valeurs[index])\n            if liste[0] == \"\":\n                return False\n            if liste[1] > liste[2]:\n                showinfo(\"info\", \"Le minimum doit être plus petit que le maximum\")\n                \n            if liste[3] < liste[1] or liste[3] > liste[2]:\n                showinfo(\n                    \"Info\",\n                    \"La valeur par défaut doit être comprise entre le minium et le maximum\",\n                )\n                \n            else:\n                \n                return True\n        else:\n            return False\n\n    def _test_ordre(self, vmin, vmax, test_value):\n        if vmin>vmax:\n             showinfo(\"info\", \"Le minimum doit être plus petit que le maximum\")\n             return False\n        elif test_value<vmin or test_value>vmax:\n            showinfo(\n                    \"Info\",\n                    \"La valeur par défaut doit être comprise entre le minium et le maximum\",\n                )\n            return False\n        else:\n            return True\n\n\n    def _test_int(self, liste):\n        try:\n\n            for element in liste:\n\n                element = int(element)\n\n            return True\n        except ValueError:\n            showerror(\"Message d'erreur\", \"Veuillez entrer un entier\")\n            \n\n    def _get_value(self):\n        if self.modifie:\n            self.valeurs[1] = int(self.liste_entry[0].get())  # min\n            self.valeurs[2] = int(self.liste_entry[1].get())  # max\n            self.valeurs[3] = int(self.liste_entry[2].get())  # valeur par def\n        else:\n            self.valeurs[0] = str(self.liste_entry[0].get())  # name\n            self.valeurs[1] = int(self.liste_entry[1].get())  # min\n            self.valeurs[2] = int(self.liste_entry[2].get())  # max\n            self.valeurs[3] = int(self.liste_entry[3].get())  # valeur par defaut\n\n    def _quit(self):\n        self.win.quit()\n        self.win.destroy()\n\n        \n    \n\n\n\n\n\n          \n\ndef main():\n    gestionnaire_ressource = Root()\n    gestionnaire_ressource.creation_fenetre()\n    \n    \n    # test._json_to_list({'Pv': {'vmin': -10, 'vmax': 20, 'vdefaut': 20, 'vact': 0}, 'Mana': {'vmin': 0, 'vmax': 20, 'vdefaut': 20, 'vact': 0}})\n   \n    \ndef test_data():\n    test=DataManage()\n    (liste,liste1)=([-10, 20, 20, 0],[0, 20, 20, 0])\n    \n    test.add_data(\"PV\",liste)\n    \n    test.add_data(\"Mana\", liste1)\n\ndef test_ordre(vmin, vmax, test_value):\n    if vmin>vmax:\n         print(\"info\", \"Le minimum doit être plus petit que le maximum\")\n         return False\n    elif test_value<vmin or test_value>vmax:\n        print(\n                \"Info\",\n                \"La valeur par défaut doit être comprise entre le minium et le maximum\",\n            )\n        return False\n    else:\n     \n        print(\"Le test est bon\")\n        return True\ndef several_test_order():\n    test_ordre(-10, 100 , 60)\n    test_ordre(-10, 100 , 120)\n    test_ordre(-10, 100 , -60)\n    test_ordre(-10, -100 , 60)\nif __name__ == \"__main__\":\n    main()\n\n    os.system(\"pause\")\n",
			"file": "/home/cedric/Documents/FichierPython/Gessource/version2/Gestionnaire de ressources3.py",
			"file_size": 17125,
			"file_write_time": 132621922232219847,
			"settings":
			{
				"buffer_size": 16329,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/LaTeXTools/LaTeX.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"Basic Builder - PdfLaTeX"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"latex",
				"LaTeXBox: View PDF"
			],
			[
				"ins",
				"LaTeXing: Install License"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"latext",
				"LaTeXTools: Clear document cache"
			],
			[
				"late",
				"LaTeXTools: View PDF"
			],
			[
				"la",
				"LaTeXTools: View PDF"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/cedric/Documents/FichierPython/Gessource/Github/version2/Gessource"
	],
	"file_history":
	[
		"/home/cedric/Games/Kerbal Space Program/GameData/Chatterer_0.9.99/Readme.txt",
		"/home/cedric/Games/Kerbal Space Program/GameData/Chatterer_0.9.99/License.txt",
		"/home/cedric/Documents/FichierPython/Gessource/version gtk/Gestionnaire de ressources3.py",
		"/home/cedric/Documents/FichierPython/Gessource/Github/version2/Gessource/Gestionnaire de ressources3.py",
		"/home/cedric/Documents/FichierPython/Gessource/version2/manage/manage_json_file.py",
		"/home/cedric/Documents/FichierPython/Gessource/version2/Gestionnaire de ressources3.py",
		"/home/sweety/Documents/Documents/Dossier programmation/FichierPython/Gessource/version gtk/Gestionnaire de ressources3.py",
		"/home/sweety/Documents/Documents/Dossier programmation/FichierPython/Gessource/version2/config/config.json",
		"/home/sweety/Documents/Documents/Dossier programmation/FichierPython/Gessource/version2/save/test sauvegarde.json",
		"/home/sweety/Documents/Documents/Dossier programmation/FichierPython/Gessource/version2/save/Pv bourse royaume.json",
		"/home/sweety/Documents/programmation/FichierPython/Gessource/Gessource/save/test.json",
		"/home/sweety/Documents/programmation/Gestionnaire de ressource/Gestionnaire de ressources3.py",
		"/home/sweety/Documents/Documents/DocumentLatex/lettre de motivation/lettre de motivation pour l'Afpa/lettre de motivation pour l'AFPA.tex",
		"/home/sweety/Documents/programmation/Gessource/Gessource/save/test.json",
		"/home/sweety/Documents/programmation/Gessource/Gessource/test sauvegarde",
		"/media/sweety/Users/Sweety/teams_1.3.00.25560_amd64/debian-binary",
		"/media/sweety/Users/Sweety/teams_1.3.00.25560_amd64/_gpgorigin",
		"/media/sweety/Program Files/Kerbal Space Program/GameData/kOS/kOS.version",
		"/media/sweety/Users/Sweety/Documents/DocumentLatex/lettre de motivation/Lettre de motivation eni-ecole/lettre de motivation pour l'AFPA.tex",
		"/media/sweety/Program Files/Kerbal Space Program/GameData/kOS/Parts/kOSkal9000/part.cfg",
		"/media/sweety/Program Files/Kerbal Space Program/GameData/kOS/Readme",
		"/media/sweety/PHILIPS UFD/Gestionnaire de ressource/Gestionnaire de ressources3.py",
		"/media/sweety/Users/Sweety/Documents/DocumentLatex/lettre de motivation/lettre de motivation pour l'Afpa/modèle lettre de motivation pour l'AFPA.tex",
		"/home/sweety/Documents/programmation/gestionnaire de sort/GestionnaireDeSort.py",
		"/home/sweety/Documents/programmation/Gessource/Gessource/Gestionnaire de ressources3_2.py",
		"/media/sweety/Users/Sweety/Documents/DocumentLatex/CV_2/CV.tex",
		"/home/sweety/Documents/programmation/gestionnaire de sort/Config/description_sort.json",
		"/home/sweety/Documents/programmation/Gestionnaire de ressource/test.json",
		"/home/sweety/Documents/programmation/lecon organisation/parite.py",
		"/media/sweety/Users/Sweety/Documents/Dossier programmation/FichierPython/Gestionnaire de ressource/Gestionnaire de ressources3.py",
		"/media/sweety/FLODRIC/Dossier perso/D&D/Les royaumes oubliés/Pv et bourse royaumes",
		"/media/sweety/Users/Sweety/Documents/Dossier programmation/FichierPython/Gestionnaire de ressource/test sauvegarde",
		"/home/sweety/Documents/programmation/Gestionnaire de ressource/test sauvegarde",
		"/home/sweety/Documents/programmation/Gestionnaire de ressource/errr",
		"/home/sweety/Documents/programmation/env/lib/python3.6/site-packages/matplotlib/backends/__init__.py",
		"/etc/python3/debian_config",
		"/home/sweety/Documents/programmation/env/lib/python3.6/site-packages/pandas/tests/io/formats/test_to_csv.py",
		"/media/sweety/FLODRIC/PasswordAgencyImp/PasswordAgencyImp.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/Agency 2.0/PasswordAgency.py",
		"/home/sweety/Documents/programmation/PasswordAgencyImp/PasswordAgencyImp.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/Gestionnaire de ressource/Gestionnaire de ressources3.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/Agency2.1/PasswordAgencyImp.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/gestionnaire de sort/GestionnaireDeSort.py",
		"/home/sweety/Documents/programmation/lecon organisation/lecon organisation.sublime-project",
		"/home/sweety/Documents/programmation/Gestionnaire de ressource/parite.py",
		"/home/sweety/Documents/Documents/Dossier programmation/FichierPython/Gestionnaire de ressource/Gestionnaire de ressources3.py",
		"/home/sweety/Documents/programmation/Gestionnaire de ressources3.py",
		"/home/sweety/Documents/PasswordAgencyImp/package/encrypt_decrypt.py",
		"/home/sweety/Documents/PasswordAgencyImp/encrypt_dececrypt.py",
		"/media/sweety/FLODRIC/Pv et Bourse D_D/PvBourses27 version orientale.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/Gestionnaire de ressource/setup.py",
		"/media/sweety/FLODRIC/Dossier programmation/Gestionnaire de ressource/Gestionnaire de ressources.py",
		"/media/sweety/FLODRIC/Dossier programmation/Agency2.1/PasswordAgencyImp.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/Agency2.1/PasswordAgency.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/Pv et Bourse D_D/PvBourses27.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/PvBourses27 version orientale.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/PvBourses27-V2.py",
		"/home/sweety/Documents/lettre de démission/cedric.ins",
		"/home/sweety/Documents/lettre de démission/lettre de démission.log",
		"/home/sweety/Documents/programmation/Pv bourses 27/PvBourses27.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/InterfaceGestionnaire.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/Dossier programmation/FichierPython/setup.py",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/DocumentLatex/lettre de démission.tex",
		"/home/sweety/Documents/recette/cake petit pois épinards/cake petit pois épinard.tex",
		"/media/sweety/FLODRIC/Dossier perso/D&D/PJ/Caydic/Caydic lvl 12 v2/Caydic lvl 12 v2.tex",
		"/home/sweety/Documents/PasswordAgencyImp/package/mdata.py",
		"/home/sweety/Documents/PasswordAgencyImp/PasswordAgencyImp.py",
		"/home/sweety/Documents/reccetteSétan/recetteSetan.tex",
		"/home/sweety/Documents/Recette cake tomate feta basilique/cake tomate feta.tex",
		"/home/sweety/Documents/croquecake/CroqueCake.tex",
		"/home/sweety/.config/sublime-text-3/Packages/LaTeXing/LaTeXing.sublime-settings",
		"/home/sweety/Documents/cake petit pois épinards/cake petit pois épinard.tex",
		"/home/sweety/.config/sublime-text-3/Packages/User/Newdoc.sublime-snippet",
		"/home/sweety/Documents/Modèle recette/Modèle recette.tex",
		"/home/sweety/Documents/Recette cake tomate féta basilique/cake tomate feta.tex",
		"/home/sweety/Documents/Recette cake tomate féta basilique/cake tomate féta.tex",
		"/home/sweety/Documents/Recette cake tomate féta basilique/cake tomate feta basilique.tex",
		"/home/sweety/Documents/Recette cake tomate féta basilique/cake  tomate feta basilique.tex",
		"/home/sweety/Documents/Recette cake tomate féta basilique/cake  tomate féta basilique.tex",
		"/home/sweety/.config/sublime-text-3/Packages/User/LaTeXTools.sublime-settings",
		"/usr/share/applications/sublime_text.desktop",
		"/home/sweety/.config/sublime-text-3/Packages/BracketHighlighter/Example.sublime-keymap",
		"/home/sweety/.config/sublime-text-3/Packages/User/LaTeXYZ/Default (Linux).sublime-mousemap",
		"/home/sweety/Documents/Documents",
		"/home/sweety/.config/sublime-text-3/Packages/LaTeXBox/LaTeXBox.sublime-settings",
		"/home/sweety/.config/sublime-text-3/Packages/LaTeXTools/LaTeXTools (Advanced).sublime-settings",
		"/home/sweety/lien",
		"/media/sweety/94EC29E3EC29BFFA/Users/Sweety/Documents/DocumentLatex/Caydic le barbarde lvl 7.tex",
		"/home/sweety/Documents/recetteSetan.tex",
		"/home/sweety/.config/sublime-text-3/Packages/LaTeXTools/LaTeXTools.sublime-settings",
		"/home/sweety/Documents/PasswordAgencyImp/package/nom caravane",
		"/home/sweety/Documents/Documents/DocumentLatex/Caydic le barbarde lvl 7.tex",
		"/media/sweety/FLODRIC/Dossier programmation/Agency 2.0/PasswordAgency.py",
		"/media/sweety/FLODRIC/Dossier perso/D&D/PJ/modèle Fiche perso/Fiche de perso générique interractif.tex",
		"/media/sweety/FLODRIC/Dossier perso/D&D/PJ/modèle Fiche perso/Fiche de perso générique.tex",
		"/media/sweety/FLODRIC/Dossier perso/D&D/monstres/modèle monstre.tex",
		"/media/sweety/FLODRIC/Dossier perso/D&D/PJ/modèle Fiche perso/Fiche de perso D & D.aux",
		"/media/sweety/FLODRIC/Dossier perso/D&D/PJ/modèle Fiche perso/Fiche de perso D & D.tex",
		"/home/sweety/Documents/PasswordAgencyImp/encrypt_decrypt.py",
		"/home/sweety/Documents/PasswordAgencyImp/update.txt",
		"/home/sweety/Documents/PasswordAgencyImp/package/__init__.py",
		"/home/sweety/Documents/PasswordAgencyImp/data/mdata.py",
		"/media/sweety/FLODRIC/Dossier perso/D&D/PJ/Caydic/Fiche descritive Caydic le Barbare lvl 11 libérateur sacré v2.tex",
		"/home/sweety/Mes Documents/DocumentLatex/site",
		"/home/sweety/Documents/PasswordAgencyImp.py",
		"/home/sweety/Documents/PasswordAgencyImp.pyc",
		"/home/sweety/Mes Documents/Dossier programmation/FichierPython/CoursOpenClassroom.py",
		"/usr/share/applications/org.kde.konsole.desktop",
		"/media/sweety/FLODRIC/Dossier programmation/Agency 2.0/encrypt_dececrypt.py",
		"/media/sweety/ESD-USB/Angency 2.0/exe.win-amd64-2.7/PasswordAgency.py",
		"/home/sweety/Mes Documents/Dossier programmation/FichierPython/Agency2.1/PasswordAgencyImp.py",
		"/home/sweety/.config/sublime-text-3/Packages/User/Package Control.sublime-settings"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 109.0,
		"where_history":
		[
			"<current file>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"text",
			"vnom",
			"nom",
			"_val",
			"val",
			"()\n",
			"save",
			"listeframe",
			"_get_sites"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"name",
			"_data",
			"data",
			"save.data",
			"_update_liste_site"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Gestionnaire de ressources3.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17623,
						"regions":
						{
						},
						"selection":
						[
							[
								6775,
								6775
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6774,
										6775
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										6759,
										6760
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3213.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/cedric/Documents/FichierPython/test gtk/test gtk.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10822,
						"regions":
						{
						},
						"selection":
						[
							[
								3058,
								3058
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 936.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/cedric/Documents/FichierPython/test gtk/test gtkapplication.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 521,
						"regions":
						{
						},
						"selection":
						[
							[
								521,
								521
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										520,
										521
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										511,
										512
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/cedric/Documents/FichierPython/Gessource/version2/Gestionnaire de ressources3.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16329,
						"regions":
						{
						},
						"selection":
						[
							[
								7403,
								7403
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										7402,
										7403
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										7386,
										7387
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3162.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 120.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/LaTeXTools/LaTeX.sublime-build",
	"project": "Gessource-Gtk.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/programmation/gestionnaire de sort/Gessort.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 203.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
